


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    2 00000000                 EXPORT           Start
    3 00000000         
    4 00000000 002AAAAA 
                       par0    DCD              0x2AAAAA
    5 00000004 000CCCCC 
                       par1    DCD              0xCCCCC
    6 00000008 0030F0F0 
                       par2    DCD              0x30F0F0
    7 0000000C 0000FF00 
                       par3    DCD              0xFF00
    8 00000010 003F0000 
                       par4    DCD              0x3F0000
    9 00000014         
   10 00000014 003FFFFF 
                       parA    DCD              0x3FFFFF
   11 00000018         
   12 00000018 00331B3D 
                       test1   DCD              0x331B3D
   13 0000001C 00331B7D 
                       asnw1   DCD              0x331B7D
   14 00000020         
   15 00000020         Start
   16 00000020 F2AF 000C       ADR              r0, test1   ;
   17 00000024 F8D0 9000       LDR              r9, [r0]    ;
   18 00000028         
   19 00000028         extract_recieved_code
   20 00000028         ; word in r9
   21 00000028         ; received code in r12
   22 00000028 F04F 0C00       MOV              r12, #0     ; reset rec_parity_
                                                            word
   23 0000002C F04F 0601       MOV              r6, #1
   24 00000030 4648            MOV              r0, r9      ; r0 = working spac
                                                            e
   25 00000032 F04F 0703       MOV              r7, #3
   26 00000036 F000 0106       AND              r1, r0, #6
   27 0000003A EA4F 0C51       MOV              r12, r1, LSR #1 ; bits 0 & 1 in
                                                             correct position
   28 0000003E EA00 1106       AND              r1, r0, r6, LSL #4 
                                                            ; r1 contains par2
   29 00000042 EA4C 0C91       ORR              r12, r12, r1, LSR #2 ; par2 in 
                                                            correct position
   30 00000046 EA00 2106       AND              r1, r0, r6, LSL #8 
                                                            ; r1 contains par3
   31 0000004A EA4C 1C51       ORR              r12, r12, r1, LSR #5
   32 0000004E EA00 4106       AND              r1, r0, r6, LSL #16
   33 00000052 EA4C 3C11       ORR              r12, r12, r1, LSR #12
   34 00000056         
   35 00000056         calculate_par_0
   36 00000056 F2AF 0058       ADR              r0, par0
   37 0000005A 6800            LDR              r0, [r0]
   38 0000005C EA00 0009       AND              r0, r0, r9
   39 00000060 F000 F859       BL               count_ones  ; puts count in r0
   40 00000064 F000 0101       AND              r1, r0, #1  ; Zero flag will be
                                                             set if count is ev
                                                            en
   41 00000068 468B            MOV              r11, r1
   42 0000006A         



ARM Macro Assembler    Page 2 


   43 0000006A         calculate_par_1
   44 0000006A F2AF 0068       ADR              r0, par1
   45 0000006E 6800            LDR              r0, [r0]
   46 00000070 EA00 0009       AND              r0, r0, r9
   47 00000074 F000 F84F       BL               count_ones  ; puts count in r0
   48 00000078 F010 0101       ANDS             r1, r0, #1  ; Zero flag will be
                                                             set if count is ev
                                                            en
   49 0000007C BF08 EB0B 
              0B41             ADDEQ            r11, r11, r1, LSL #1
   50 00000082         
   51 00000082         calculate_par_2
   52 00000082 F2AF 007C       ADR              r0, par2
   53 00000086 6800            LDR              r0, [r0]
   54 00000088 EA00 0009       AND              r0, r0, r9
   55 0000008C F000 F843       BL               count_ones  ; puts count in r0
   56 00000090 F010 0101       ANDS             r1, r0, #1  ; Zero flag will be
                                                             set if count is ev
                                                            en
   57 00000094 BF08 EB0B 
              0B81             ADDEQ            r11, r11, r1, LSL #2
   58 0000009A         
   59 0000009A         calculate_par_3
   60 0000009A F2AF 0090       ADR              r0, par3    ; load mask address
                                                            
   61 0000009E 6800            LDR              r0, [r0]    ; load actual mask
   62 000000A0 EA00 0009       AND              r0, r0, r9  ; r0 = unpacked par
                                                            ity
   63 000000A4 F000 F837       BL               count_ones  ; puts count in r0
   64 000000A8 F010 0001       ANDS             r0, r0, #1  ; Zero flag will be
                                                             set if count is ev
                                                            en
   65 000000AC BF02 EA4F 
              2039             ROREQ            r0, r9, #8  ; shift parity to i
                                                            ndex 0
   66 000000B2 F000 0001       ANDEQ            r0, r0, #1  ; r3 = unpacked p3 
                                                            bit
   67 000000B6 EB0B 0BC0       ADDEQ            r11, r11, r0, LSL #3 ; move par
                                                            ity bit to position
                                                             
   68 000000BA         
   69 000000BA         calculate_par_4
   70 000000BA F2AF 00AC       ADR              r0, par4    ; load mask address
                                                            
   71 000000BE 6800            LDR              r0, [r0]    ; load actual mask
   72 000000C0 EA00 0009       AND              r0, r0, r9  ; r0 = unpacked par
                                                            ity
   73 000000C4 F000 F827       BL               count_ones  ; puts count in r0
   74 000000C8 F010 0001       ANDS             r0, r0, #1  ; Zero flag will be
                                                             set if count is ev
                                                            en
   75 000000CC BF02 EA4F 
              4039             ROREQ            r0, r9, #16 ; shift parity to i
                                                            ndex 0
   76 000000D2 F000 0001       ANDEQ            r0, r0, #1  ; r3 = unpacked p3 
                                                            bit
   77 000000D6 EB0B 1B00       ADDEQ            r11, r11, r0, LSL #4 ; move par
                                                            ity bit to position
                                                             



ARM Macro Assembler    Page 3 


   78 000000DA         
   79 000000DA         ; generic method to calculate parity bit
   80 000000DA         ;
   81 000000DA         ; r0  -> general (loaded initially with address of mask)
                       
   82 000000DA         ; r1  -> positions to ROR by to get parity bit in index 
                       1 from base word
   83 000000DA         ; r10 -> index of working parity bit in parity status wo
                       rd
   84 000000DA         generic_parity
   85 000000DA BC03            POP              {r0, r1}
   86 000000DC 6800            LDR              r0, [r0]    ; load actual mask
   87 000000DE EA00 0009       AND              r0, r0, r9  ; r0 = unpacked par
                                                            ity
   88 000000E2 F000 F818       BL               count_ones  ; puts count in r0
   89 000000E6 F010 0001       ANDS             r0, r0, #1  ; Zero flag will be
                                                             set if count is ev
                                                            en
   90 000000EA BF04 FA69 
              F001             ROREQ            r0, r9, r1  ; shift parity to i
                                                            ndex 0
   91 000000F0 F000 0001       ANDEQ            r0, r0, #1  ; r0 = unpacked par
                                                            ity bit
   92 000000F4 FA00 F00A       LSL              r0, r10     ; move parity bit t
                                                            o position
   93 000000F8 BF08 EA4B 
              0B00             ORREQ            r11, r11, r0 ; pack calculated 
                                                            parity bit
   94 000000FE F10A 0A01       ADD              r10, r10, #1 ; increment index 
                                                                 
   95 00000102         
   96 00000102         calc_correcting_code
   97 00000102 EA9C 000B       EORS             r0, r12, r11
   98 00000106 D005            BEQ              stop
   99 00000108 F04F 0101       MOV              r1, #1
  100 0000010C FA01 F100       LSL              r1, r0
  101 00000110 EA89 0901       EOR              r9, r9, r1
  102 00000114         
  103 00000114         stop
  104 00000114 E7FE            B                .
  105 00000116         
  106 00000116         correct_code
  107 00000116         
  108 00000116         
  109 00000116         
  110 00000116         
  111 00000116         
  112 00000116         
  113 00000116         ;parity_all_check
  114 00000116         ;  ADR  r1, par1
  115 00000116         ;  LDR  r1, [r1] ; load p_all mask
  116 00000116         ;  AND  r0, r1, r9  ; extract bits
  117 00000116         ;  BL  count_ones
  118 00000116         ;  RRX  r2, r2, #1  ; set carry. 0 = even, 1 = odd 
  119 00000116         
  120 00000116         
  121 00000116         ; Assume that r0 has the word loaded. Places count in r0
                        when done (RESETS)
  122 00000116         ; WARNING: Code overwrites r0



ARM Macro Assembler    Page 4 


  123 00000116         ; r0 = word
  124 00000116         ; r1 = word!
  125 00000116         ; r2 = count
  126 00000116         count_ones
  127 00000116 F04F 0200       MOV              r2, #0
  128 0000011A         loop
  129 0000011A 2800            CMP              r0, #&0
  130 0000011C BF04 4610       MOVEQ            r0, r2
  131 00000120 4770            BXEQ             lr          ; base case
  132 00000122         
  133 00000122 F1A0 0101       SUB              r1, r0, #1
  134 00000126 EA00 0001       AND              r0, r0, r1
  135 0000012A F102 0201       ADD              r2, r2, #1  ; increment count 
  136 0000012E E7F4            B                loop
  137 00000130         
  138 00000130         test_count_ones
  139 00000130 F04F 0024       MOV              r0, #0x24
  140 00000134 F7FF FFEF       BL               count_ones
  141 00000138 2A02            CMP              r2, #2      ; should be equal
  142 0000013A F04F 0020       MOV              r0, #0x20
  143 0000013E F04F 0200       MOV              r2, #0
  144 00000142 F7FF FFE8       BL               count_ones
  145 00000146 2A01            CMP              r2, #1
  146 00000148 47F0            BLX              lr
  147 0000014A         
  148 0000014A         
  149 0000014A         
  150 0000014A 00 00           ALIGN
  151 0000014C                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\main.d -o.\main.o -I.\RTE\_SimpleProject -IC:\Keil_v5\ARM\PACK\A
RM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Dev
ice\Include\TM4C123 --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION 
SETA 526" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --list=.
\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 1 in file main.s
   Uses
      None
Comment: .text unused
Start 00000020

Symbol: Start
   Definitions
      At line 15 in file main.s
   Uses
      At line 2 in file main.s
Comment: Start used once
asnw1 0000001C

Symbol: asnw1
   Definitions
      At line 13 in file main.s
   Uses
      None
Comment: asnw1 unused
calc_correcting_code 00000102

Symbol: calc_correcting_code
   Definitions
      At line 96 in file main.s
   Uses
      None
Comment: calc_correcting_code unused
calculate_par_0 00000056

Symbol: calculate_par_0
   Definitions
      At line 35 in file main.s
   Uses
      None
Comment: calculate_par_0 unused
calculate_par_1 0000006A

Symbol: calculate_par_1
   Definitions
      At line 43 in file main.s
   Uses
      None
Comment: calculate_par_1 unused
calculate_par_2 00000082

Symbol: calculate_par_2
   Definitions
      At line 51 in file main.s
   Uses
      None
Comment: calculate_par_2 unused
calculate_par_3 0000009A

Symbol: calculate_par_3



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 59 in file main.s
   Uses
      None
Comment: calculate_par_3 unused
calculate_par_4 000000BA

Symbol: calculate_par_4
   Definitions
      At line 69 in file main.s
   Uses
      None
Comment: calculate_par_4 unused
correct_code 00000116

Symbol: correct_code
   Definitions
      At line 106 in file main.s
   Uses
      None
Comment: correct_code unused
count_ones 00000116

Symbol: count_ones
   Definitions
      At line 126 in file main.s
   Uses
      At line 39 in file main.s
      At line 47 in file main.s
      At line 55 in file main.s
      At line 63 in file main.s
      At line 73 in file main.s
      At line 88 in file main.s
      At line 140 in file main.s
      At line 144 in file main.s

extract_recieved_code 00000028

Symbol: extract_recieved_code
   Definitions
      At line 19 in file main.s
   Uses
      None
Comment: extract_recieved_code unused
generic_parity 000000DA

Symbol: generic_parity
   Definitions
      At line 84 in file main.s
   Uses
      None
Comment: generic_parity unused
loop 0000011A

Symbol: loop
   Definitions
      At line 128 in file main.s
   Uses
      At line 136 in file main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Comment: loop used once
par0 00000000

Symbol: par0
   Definitions
      At line 4 in file main.s
   Uses
      At line 36 in file main.s
Comment: par0 used once
par1 00000004

Symbol: par1
   Definitions
      At line 5 in file main.s
   Uses
      At line 44 in file main.s
Comment: par1 used once
par2 00000008

Symbol: par2
   Definitions
      At line 6 in file main.s
   Uses
      At line 52 in file main.s
Comment: par2 used once
par3 0000000C

Symbol: par3
   Definitions
      At line 7 in file main.s
   Uses
      At line 60 in file main.s
Comment: par3 used once
par4 00000010

Symbol: par4
   Definitions
      At line 8 in file main.s
   Uses
      At line 70 in file main.s
Comment: par4 used once
parA 00000014

Symbol: parA
   Definitions
      At line 10 in file main.s
   Uses
      None
Comment: parA unused
stop 00000114

Symbol: stop
   Definitions
      At line 103 in file main.s
   Uses
      At line 98 in file main.s
Comment: stop used once
test1 00000018




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Symbol: test1
   Definitions
      At line 12 in file main.s
   Uses
      At line 16 in file main.s
Comment: test1 used once
test_count_ones 00000130

Symbol: test_count_ones
   Definitions
      At line 138 in file main.s
   Uses
      None
Comment: test_count_ones unused
23 symbols
357 symbols in table
