


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    2 00000000                 EXPORT           Start
    3 00000000         
    4 00000000 002AAAAA 
                       par0    DCD              0x2AAAAA
    5 00000004 000CCCCC 
                       par1    DCD              0xCCCCC
    6 00000008 0030F0F0 
                       par2    DCD              0x30F0F0
    7 0000000C 0000FF00 
                       par3    DCD              0xFF00
    8 00000010 003F0000 
                       par4    DCD              0x3F0000
    9 00000014         
   10 00000014 003FFFFE 
                       parA    DCD              0x3FFFFE
   11 00000018         
   12 00000018 00331B3D 
                       test1   DCD              0x331B3D
   13 0000001C 00331B7D 
                       result1 DCD              0x331B7D
   14 00000020 0011CADB 
                       test2   DCD              0x11CADB
   15 00000024         
   16 00000024         
   17 00000024         Start
   18 00000024 F2AF 0010       ADR              r0, test1   ;
   19 00000028 F8D0 9000       LDR              r9, [r0]    ;
   20 0000002C         
   21 0000002C         extract_recieved_code
   22 0000002C         ; word in r9
   23 0000002C         ; received code in r12
   24 0000002C F04F 0C00       MOV              r12, #0     ; reset rec_parity_
                                                            word
   25 00000030 F04F 0601       MOV              r6, #1
   26 00000034 4648            MOV              r0, r9      ; r0 = working spac
                                                            e
   27 00000036 F04F 0703       MOV              r7, #3
   28 0000003A F000 0106       AND              r1, r0, #6
   29 0000003E EA4F 0C51       MOV              r12, r1, LSR #1 ; bits 0 & 1 in
                                                             correct position
   30 00000042 EA00 1106       AND              r1, r0, r6, LSL #4 
                                                            ; r1 contains par2
   31 00000046 EA4C 0C91       ORR              r12, r12, r1, LSR #2 ; par2 in 
                                                            correct position
   32 0000004A EA00 2106       AND              r1, r0, r6, LSL #8 
                                                            ; r1 contains par3
   33 0000004E EA4C 1C51       ORR              r12, r12, r1, LSR #5
   34 00000052 EA00 4106       AND              r1, r0, r6, LSL #16
   35 00000056 EA4C 3C11       ORR              r12, r12, r1, LSR #12
   36 0000005A         
   37 0000005A         calculate_par_0
   38 0000005A F2AF 005C       ADR              r0, par0
   39 0000005E 6800            LDR              r0, [r0]
   40 00000060 EA00 0009       AND              r0, r0, r9
   41 00000064 EA4F 0070       ROR              r0, r0, #1
   42 00000068 F000 0301       AND              r3, r0, #1
   43 0000006C F000 F860       BL               count_ones  ; puts count in r0



ARM Macro Assembler    Page 2 


   44 00000070 F010 0101       ANDS             r1, r0, #1  ; Zero flag will be
                                                             set if count is ev
                                                            en
   45 00000074 BF08 449B       ADDEQ            r11, r11, r3
   46 00000078         
   47 00000078         calculate_par_1
   48 00000078 F2AF 0078       ADR              r0, par1
   49 0000007C 6800            LDR              r0, [r0]
   50 0000007E EA00 0009       AND              r0, r0, r9
   51 00000082 EA4F 00B0       ROR              r0, r0, #2
   52 00000086 F000 0301       AND              r3, r0, #1
   53 0000008A F000 F851       BL               count_ones  ; puts count in r0
   54 0000008E F010 0101       ANDS             r1, r0, #1  ; Zero flag will be
                                                             set if count is ev
                                                            en
   55 00000092 BF08 EB0B 
              0B43             ADDEQ            r11, r11, r3, LSL #1
   56 00000098         
   57 00000098         calculate_par_2
   58 00000098 F2AF 0094       ADR              r0, par2
   59 0000009C 6800            LDR              r0, [r0]
   60 0000009E EA00 0009       AND              r0, r0, r9
   61 000000A2 EA4F 1030       ROR              r0, r0, #4
   62 000000A6 F000 0301       AND              r3, r0, #1
   63 000000AA F000 F841       BL               count_ones  ; puts count in r0
   64 000000AE F010 0101       ANDS             r1, r0, #1  ; Zero flag will be
                                                             set if count is ev
                                                            en
   65 000000B2 BF08 EB0B 
              0B83             ADDEQ            r11, r11, r3, LSL #2
   66 000000B8         
   67 000000B8         calculate_par_3
   68 000000B8 F2AF 00B0       ADR              r0, par3
   69 000000BC 6800            LDR              r0, [r0]
   70 000000BE EA00 0009       AND              r0, r0, r9
   71 000000C2 EA4F 2030       ROR              r0, r0, #8
   72 000000C6 F000 0301       AND              r3, r0, #1
   73 000000CA F000 F831       BL               count_ones  ; puts count in r0
   74 000000CE F010 0101       ANDS             r1, r0, #1
   75 000000D2         ;MOVEQ r1, #1     ; Zero flag will be set if count is OD
                       D
   76 000000D2 BF08 EB0B 
              0BC3             ADDEQ            r11, r11, r3, LSL #3
   77 000000D8         
   78 000000D8         calculate_par_4
   79 000000D8 F2AF 00CC       ADR              r0, par4
   80 000000DC 6800            LDR              r0, [r0]
   81 000000DE EA00 0009       AND              r0, r0, r9
   82 000000E2 EA4F 4139       ROR              r1, r9, #16
   83 000000E6 F001 0301       AND              r3, r1, #1
   84 000000EA F000 F821       BL               count_ones  ; puts count in r0
   85 000000EE F010 0201       ANDS             r2, r0, #1  ; Zero flag will be
                                                             set if count is ev
                                                            en
   86 000000F2         ; equal, do nothing.
   87 000000F2         ; NE = find parity bit & move it
   88 000000F2 BF08 EB0B 
              1B03             ADDEQ            r11, r11, r3, LSL #4
   89 000000F8         



ARM Macro Assembler    Page 3 


   90 000000F8         calc_correcting_code
   91 000000F8 EA9C 000B       EORS             r0, r12, r11
   92 000000FC D006            BEQ              pall
   93 000000FE F04F 0101       MOV              r1, #1
   94 00000102 FA01 F100       LSL              r1, r0
   95 00000106 EA89 0901       EOR              r9, r9, r1
   96 0000010A E00C            B                stop
   97 0000010C         
   98 0000010C         pall
   99 0000010C F009 0301       AND              r3, r9, #1
  100 00000110 F2AF 1000       ADR              r0, parA
  101 00000114 6800            LDR              r0, [r0]
  102 00000116 EA09 0000       AND              r0, r9, r0
  103 0000011A F000 F809       BL               count_ones
  104 0000011E         ; EQ -> odd, r3 should be 1
  105 0000011E         ; NE -> even, r3 should be 0
  106 0000011E F000 0001       AND              r0, r0, #1
  107 00000122 4218            TST              r0, r3
  108 00000124 D1FE            BNE              .           ; two errors, canno
                                                            t be corrected
  109 00000126         
  110 00000126         stop
  111 00000126 F2AF 100C       ADR              r0, result1
  112 0000012A 6800            LDR              r0, [r0]
  113 0000012C 4548            CMP              r0, r9      ; Should set zero f
                                                            lag if everything w
                                                            orked
  114 0000012E E7FE            B                .
  115 00000130         
  116 00000130         ; Assume that r0 has the word loaded. Places count in r0
                        when done (RESETS)
  117 00000130         ; WARNING: Code overwrites r0
  118 00000130         ; r0 = word
  119 00000130         ; r1 = word!
  120 00000130         ; r2 = count
  121 00000130         count_ones
  122 00000130 F04F 0200       MOV              r2, #0
  123 00000134         loop
  124 00000134 2800            CMP              r0, #&0
  125 00000136 BF04 4610       MOVEQ            r0, r2
  126 0000013A 4770            BXEQ             lr          ; base case
  127 0000013C         
  128 0000013C F1A0 0101       SUB              r1, r0, #1
  129 00000140 EA00 0001       AND              r0, r0, r1
  130 00000144 F102 0201       ADD              r2, r2, #1  ; increment count 
  131 00000148 E7F4            B                loop
  132 0000014A         
  133 0000014A         test_count_ones
  134 0000014A F04F 0024       MOV              r0, #0x24
  135 0000014E F7FF FFEF       BL               count_ones
  136 00000152 2A02            CMP              r2, #2      ; should be equal
  137 00000154 F04F 0020       MOV              r0, #0x20
  138 00000158 F04F 0200       MOV              r2, #0
  139 0000015C F7FF FFE8       BL               count_ones
  140 00000160 2A01            CMP              r2, #1
  141 00000162 47F0            BLX              lr
  142 00000164         
  143 00000164                 ALIGN
  144 00000164                 END



ARM Macro Assembler    Page 4 


Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\main.d -o.\main.o -I.\RTE\_SimpleProject -IC:\Keil_v5\ARM\PACK\A
RM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Dev
ice\Include\TM4C123 --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION 
SETA 526" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --list=.
\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 1 in file main.s
   Uses
      None
Comment: .text unused
Start 00000024

Symbol: Start
   Definitions
      At line 17 in file main.s
   Uses
      At line 2 in file main.s
Comment: Start used once
calc_correcting_code 000000F8

Symbol: calc_correcting_code
   Definitions
      At line 90 in file main.s
   Uses
      None
Comment: calc_correcting_code unused
calculate_par_0 0000005A

Symbol: calculate_par_0
   Definitions
      At line 37 in file main.s
   Uses
      None
Comment: calculate_par_0 unused
calculate_par_1 00000078

Symbol: calculate_par_1
   Definitions
      At line 47 in file main.s
   Uses
      None
Comment: calculate_par_1 unused
calculate_par_2 00000098

Symbol: calculate_par_2
   Definitions
      At line 57 in file main.s
   Uses
      None
Comment: calculate_par_2 unused
calculate_par_3 000000B8

Symbol: calculate_par_3
   Definitions
      At line 67 in file main.s
   Uses
      None
Comment: calculate_par_3 unused
calculate_par_4 000000D8

Symbol: calculate_par_4



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 78 in file main.s
   Uses
      None
Comment: calculate_par_4 unused
count_ones 00000130

Symbol: count_ones
   Definitions
      At line 121 in file main.s
   Uses
      At line 43 in file main.s
      At line 53 in file main.s
      At line 63 in file main.s
      At line 73 in file main.s
      At line 84 in file main.s
      At line 103 in file main.s
      At line 135 in file main.s
      At line 139 in file main.s

extract_recieved_code 0000002C

Symbol: extract_recieved_code
   Definitions
      At line 21 in file main.s
   Uses
      None
Comment: extract_recieved_code unused
loop 00000134

Symbol: loop
   Definitions
      At line 123 in file main.s
   Uses
      At line 131 in file main.s
Comment: loop used once
pall 0000010C

Symbol: pall
   Definitions
      At line 98 in file main.s
   Uses
      At line 92 in file main.s
Comment: pall used once
par0 00000000

Symbol: par0
   Definitions
      At line 4 in file main.s
   Uses
      At line 38 in file main.s
Comment: par0 used once
par1 00000004

Symbol: par1
   Definitions
      At line 5 in file main.s
   Uses
      At line 48 in file main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Comment: par1 used once
par2 00000008

Symbol: par2
   Definitions
      At line 6 in file main.s
   Uses
      At line 58 in file main.s
Comment: par2 used once
par3 0000000C

Symbol: par3
   Definitions
      At line 7 in file main.s
   Uses
      At line 68 in file main.s
Comment: par3 used once
par4 00000010

Symbol: par4
   Definitions
      At line 8 in file main.s
   Uses
      At line 79 in file main.s
Comment: par4 used once
parA 00000014

Symbol: parA
   Definitions
      At line 10 in file main.s
   Uses
      At line 100 in file main.s
Comment: parA used once
result1 0000001C

Symbol: result1
   Definitions
      At line 13 in file main.s
   Uses
      At line 111 in file main.s
Comment: result1 used once
stop 00000126

Symbol: stop
   Definitions
      At line 110 in file main.s
   Uses
      At line 96 in file main.s
Comment: stop used once
test1 00000018

Symbol: test1
   Definitions
      At line 12 in file main.s
   Uses
      At line 18 in file main.s
Comment: test1 used once
test2 00000020




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Symbol: test2
   Definitions
      At line 14 in file main.s
   Uses
      None
Comment: test2 unused
test_count_ones 0000014A

Symbol: test_count_ones
   Definitions
      At line 133 in file main.s
   Uses
      None
Comment: test_count_ones unused
23 symbols
357 symbols in table
