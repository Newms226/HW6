


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    2 00000000                 EXPORT           Start
    3 00000000                 IMPORT           exp
    4 00000000         
    5 00000000 002AAAAA 
              000CCCCC 
              0030F0F0 
              0000FF00 
              003F0000 masks   DCD              0x2AAAAA, 0xCCCCC, 0x30F0F0, 0x
FF00, 0x3F0000
    6 00000014         
    7 00000014 003FFFFF 
                       parA    DCD              0x3FFFFF
    8 00000018         
    9 00000018 00331B3D 
                       test1   DCD              0x331B3D
   10 0000001C 00331B7D 
                       asnw1   DCD              0x331B7D
   11 00000020         
   12 00000020         ; {r0 - r2} -> general purpose
   13 00000020         ;
   14 00000020         ; r8  -> word to parse
   15 00000020         ; r9  -> working address of the mask array
   16 00000020         ; r10 -> index of working parity bit in calculated parit
                       y word
   17 00000020         ; r11 -> calculated parity word
   18 00000020         ; r12 -> received Parity word
   19 00000020         
   20 00000020         Start
   21 00000020 F2AF 000C       ADR              r0, test1   ;
   22 00000024 F8D0 8000       LDR              r8, [r0]    ;
   23 00000028 F2AF 092C       ADR              r9, masks
   24 0000002C F000 F80D       BL               extract_recieved_code
   25 00000030 F04F 0A00       MOV              r10, #0
   26 00000034 E01F            B                generic_parity
   27 00000036         
   28 00000036         calc_correcting_code
   29 00000036 EA9C 000B       EORS             r0, r12, r11
   30 0000003A D005            BEQ              stop
   31 0000003C         
   32 0000003C         correct_word
   33 0000003C F04F 0101       MOV              r1, #1
   34 00000040 FA01 F100       LSL              r1, r0
   35 00000044 EA88 0801       EOR              r8, r8, r1
   36 00000048         
   37 00000048         stop
   38 00000048 E7FE            B                .
   39 0000004A         
   40 0000004A         
   41 0000004A         extract_recieved_code
   42 0000004A         ; word in r8
   43 0000004A         ; received code in r12
   44 0000004A F04F 0C00       MOV              r12, #0     ; reset rec_parity_
                                                            word
   45 0000004E F04F 0601       MOV              r6, #1
   46 00000052 4640            MOV              r0, r8      ; r0 = working spac
                                                            e
   47 00000054 F000 0106       AND              r1, r0, #6



ARM Macro Assembler    Page 2 


   48 00000058 EA4F 0C51       MOV              r12, r1, LSR #1 ; bits 0 & 1 in
                                                             correct position
   49 0000005C EA00 1106       AND              r1, r0, r6, LSL #4 
                                                            ; r1 contains par2
   50 00000060 EA4C 0C91       ORR              r12, r1, LSR #2 ; par2 in corre
                                                            ct position
   51 00000064 EA00 2106       AND              r1, r0, r6, LSL #8 
                                                            ; r1 contains par3
   52 00000068 EA4C 1C51       ORR              r12, r1, LSR #5
   53 0000006C EA00 4106       AND              r1, r0, r6, LSL #16
   54 00000070 EA4C 3C11       ORR              r12, r1, LSR #12
   55 00000074 4770            BX               lr
   56 00000076         
   57 00000076         generic_parity
   58 00000076 F1BA 0F05       CMP              r10, #5     ; base case
   59 0000007A D0DC            BEQ              calc_correcting_code
   60 0000007C         
   61 0000007C F857 0B01       LDR              r0, [r7], #1 ; load actual mask
                                                            
   62 00000080 EA00 0008       AND              r0, r8      ; r0 = unpacked par
                                                            ity
   63 00000084 F000 F816       BL               count_ones  ; puts count in r0
   64 00000088 F010 0001       ANDS             r0, #1      ; Zero flag will be
                                                             set if count is ev
                                                            en
   65 0000008C D002            BEQ              shift       ; Branch to shift i
                                                            nstruction 
   66 0000008E         
   67 0000008E         continue
   68 0000008E F10A 0A01       ADD              r10, #1     ; increment index
   69 00000092 E7F0            B                generic_parity
   70 00000094         
   71 00000094         shift
   72 00000094 F04F 0202       MOV              r2, #2
   73 00000098 E92D 0404       PUSH             {r2, r10}   ; {base, exponentia
                                                            l}
   74 0000009C F7FF FFFE       BL               exp         ; branch to calcula
                                                            te exponent
   75 000000A0 BC01            POP              {r0}        ; get result (ie: a
                                                            mount of bits to sh
                                                            ift)
   76 000000A2 FA68 F000       ROR              r0, r8, r0  ; shift parity to i
                                                            ndex 0
   77 000000A6 F000 0001       AND              r0, r0, #1  ; r0 = unpacked par
                                                            ity bit
   78 000000AA FA00 F00A       LSL              r0, r10     ; move parity bit t
                                                            o position
   79 000000AE EA4B 0B00       ORR              r11, r11, r0 ; pack calculated 
                                                            parity bit
   80 000000B2 E7EC            B                continue
   81 000000B4         
   82 000000B4         ;parity_all_check
   83 000000B4         ;  ADR  r1, par1
   84 000000B4         ;  LDR  r1, [r1] ; load p_all mask
   85 000000B4         ;  AND  r0, r1, r9  ; extract bits
   86 000000B4         ;  BL  count_ones
   87 000000B4         ;  RRX  r2, r2, #1  ; set carry. 0 = even, 1 = odd 
   88 000000B4         
   89 000000B4         



ARM Macro Assembler    Page 3 


   90 000000B4         ; Assume that r0 has the word loaded. Places count in r0
                        when done (RESETS)
   91 000000B4         ; WARNING: Code overwrites r0
   92 000000B4         ; r0 = word
   93 000000B4         ; r1 = word!
   94 000000B4         ; r2 = count
   95 000000B4         count_ones
   96 000000B4 F04F 0200       MOV              r2, #0
   97 000000B8         count_ones_loop
   98 000000B8 2800            CMP              r0, #&0
   99 000000BA BF04 4610       MOVEQ            r0, r2
  100 000000BE 4770            BXEQ             lr          ; base case
  101 000000C0         
  102 000000C0 F1A0 0101       SUB              r1, r0, #1
  103 000000C4 EA00 0001       AND              r0, r0, r1
  104 000000C8 F102 0201       ADD              r2, r2, #1  ; increment count 
  105 000000CC E7F4            B                count_ones_loop
  106 000000CE         
  107 000000CE         test_count_ones
  108 000000CE F04F 0024       MOV              r0, #0x24
  109 000000D2 F7FF FFEF       BL               count_ones
  110 000000D6 2A02            CMP              r2, #2      ; should be equal
  111 000000D8 F04F 0020       MOV              r0, #0x20
  112 000000DC F04F 0200       MOV              r2, #0
  113 000000E0 F7FF FFE8       BL               count_ones
  114 000000E4 2A01            CMP              r2, #1
  115 000000E6 47F0            BLX              lr
  116 000000E8         
  117 000000E8         
  118 000000E8         
  119 000000E8                 ALIGN
  120 000000E8                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\main.d -o.\main.o -I.\RTE\_SimpleProject -IC:\Keil_v5\ARM\PACK\A
RM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Dev
ice\Include\TM4C123 --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION 
SETA 526" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --list=.
\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 1 in file main.s
   Uses
      None
Comment: .text unused
Start 00000020

Symbol: Start
   Definitions
      At line 20 in file main.s
   Uses
      At line 2 in file main.s
Comment: Start used once
asnw1 0000001C

Symbol: asnw1
   Definitions
      At line 10 in file main.s
   Uses
      None
Comment: asnw1 unused
calc_correcting_code 00000036

Symbol: calc_correcting_code
   Definitions
      At line 28 in file main.s
   Uses
      At line 59 in file main.s
Comment: calc_correcting_code used once
continue 0000008E

Symbol: continue
   Definitions
      At line 67 in file main.s
   Uses
      At line 80 in file main.s
Comment: continue used once
correct_word 0000003C

Symbol: correct_word
   Definitions
      At line 32 in file main.s
   Uses
      None
Comment: correct_word unused
count_ones 000000B4

Symbol: count_ones
   Definitions
      At line 95 in file main.s
   Uses
      At line 63 in file main.s
      At line 109 in file main.s
      At line 113 in file main.s

count_ones_loop 000000B8



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: count_ones_loop
   Definitions
      At line 97 in file main.s
   Uses
      At line 105 in file main.s
Comment: count_ones_loop used once
extract_recieved_code 0000004A

Symbol: extract_recieved_code
   Definitions
      At line 41 in file main.s
   Uses
      At line 24 in file main.s
Comment: extract_recieved_code used once
generic_parity 00000076

Symbol: generic_parity
   Definitions
      At line 57 in file main.s
   Uses
      At line 26 in file main.s
      At line 69 in file main.s

masks 00000000

Symbol: masks
   Definitions
      At line 5 in file main.s
   Uses
      At line 23 in file main.s
Comment: masks used once
parA 00000014

Symbol: parA
   Definitions
      At line 7 in file main.s
   Uses
      None
Comment: parA unused
shift 00000094

Symbol: shift
   Definitions
      At line 71 in file main.s
   Uses
      At line 65 in file main.s
Comment: shift used once
stop 00000048

Symbol: stop
   Definitions
      At line 37 in file main.s
   Uses
      At line 30 in file main.s
Comment: stop used once
test1 00000018

Symbol: test1



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 9 in file main.s
   Uses
      At line 21 in file main.s
Comment: test1 used once
test_count_ones 000000CE

Symbol: test_count_ones
   Definitions
      At line 107 in file main.s
   Uses
      None
Comment: test_count_ones unused
16 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

exp 00000000

Symbol: exp
   Definitions
      At line 3 in file main.s
   Uses
      At line 74 in file main.s
Comment: exp used once
1 symbol
351 symbols in table
