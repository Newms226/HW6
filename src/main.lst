


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    2 00000000                 EXPORT           Start
    3 00000000         
    4 00000000 002AAAAA 
                       par0    DCD              0x2AAAAA
    5 00000004 000CCCCC 
                       par1    DCD              0xCCCCC
    6 00000008 0030F0F0 
                       par2    DCD              0x30F0F0
    7 0000000C 0000FF00 
                       par3    DCD              0xFF00
    8 00000010 003F0000 
                       par4    DCD              0x3F0000
    9 00000014 003FFFFF 
                       parA    DCD              0x3FFFFF    ;
   10 00000018 00231B3A 
                       base    DCD              0x231B3A
   11 0000001C         
   12 0000001C         Start
   13 0000001C F2AF 0008       ADR              r0, base    ;
   14 00000020 F8D0 9000       LDR              r9, [r0]    ;
   15 00000024         ;MOV  r9, #&231B3A
   16 00000024 F000 F86A       BL               test_count_ones
   17 00000028         
   18 00000028 E7FE            B                .
   19 0000002A         
   20 0000002A         extract_recieved_code
   21 0000002A         ; word in r9
   22 0000002A         ; received code in r12
   23 0000002A F04F 0C00       MOV              r12, #0     ; reset rec_parity_
                                                            word
   24 0000002E F04F 0601       MOV              r6, #1
   25 00000032 4648            MOV              r0, r9      ; r0 = working spac
                                                            e
   26 00000034 F04F 0703       MOV              r7, #3
   27 00000038 EA00 0147       AND              r1, r0, r7, LSL #1
   28 0000003C EA4F 0C51       MOV              r12, r1, LSR #1 ; bits 0 & 1 in
                                                             correct position
   29 00000040 EA00 1106       AND              r1, r0, r6, LSL #4 
                                                            ; r1 contains par2
   30 00000044 EA4C 0C91       ORR              r12, r12, r1, LSR #2 ; par2 in 
                                                            correct position
   31 00000048 EA00 2106       AND              r1, r0, r6, LSL #8 
                                                            ; r1 contains par3
   32 0000004C EA4C 1C51       ORR              r12, r12, r1, LSR #5
   33 00000050 EA00 4106       AND              r1, r0, r6, LSL #16
   34 00000054 EA4C 3C11       ORR              r12, r12, r1, LSR #12
   35 00000058         
   36 00000058         calculate_par_0
   37 00000058 F2AF 005C       ADR              r0, par0
   38 0000005C 6800            LDR              r0, [r0]
   39 0000005E EA00 0009       AND              r0, r0, r9
   40 00000062 F000 F83F       BL               count_ones  ; puts count in r0
   41 00000066 F080 0101       EOR              r1, r0, #1  ; Zero flag will be
                                                             set if count is ev
                                                            en
   42 0000006A 468B            MOV              r11, r1
   43 0000006C         



ARM Macro Assembler    Page 2 


   44 0000006C         calculate_par_1
   45 0000006C F2AF 006C       ADR              r0, par1
   46 00000070 6800            LDR              r0, [r0]
   47 00000072 EA00 0009       AND              r0, r0, r9
   48 00000076 F000 F835       BL               count_ones  ; puts count in r0
   49 0000007A F000 0101       AND              r1, r0, #1  ; Zero flag will be
                                                             set if count is ev
                                                            en
   50 0000007E EB0B 0B41       ADD              r11, r11, r1, LSL #1
   51 00000082         
   52 00000082         calculate_par_2
   53 00000082 F2AF 007C       ADR              r0, par2
   54 00000086 6800            LDR              r0, [r0]
   55 00000088 EA00 0009       AND              r0, r0, r9
   56 0000008C F000 F82A       BL               count_ones  ; puts count in r0
   57 00000090 F000 0101       AND              r1, r0, #1  ; Zero flag will be
                                                             set if count is ev
                                                            en
   58 00000094 EB0B 0B81       ADD              r11, r11, r1, LSL #2
   59 00000098         
   60 00000098         calculate_par_3
   61 00000098 F2AF 0090       ADR              r0, par3
   62 0000009C 6800            LDR              r0, [r0]
   63 0000009E EA00 0009       AND              r0, r0, r9
   64 000000A2 F000 F81F       BL               count_ones  ; puts count in r0
   65 000000A6 F000 0101       AND              r1, r0, #1  ; Zero flag will be
                                                             set if count is ev
                                                            en
   66 000000AA EB0B 0BC1       ADD              r11, r11, r1, LSL #3
   67 000000AE         
   68 000000AE         calculate_par_4
   69 000000AE F2AF 00A0       ADR              r0, par4
   70 000000B2 6800            LDR              r0, [r0]
   71 000000B4 EA00 0009       AND              r0, r0, r9
   72 000000B8 F000 F814       BL               count_ones  ; puts count in r0
   73 000000BC F000 0101       AND              r1, r0, #1  ; Zero flag will be
                                                             set if count is ev
                                                            en
   74 000000C0 EA4F 0141       LSL              r1, #1
   75 000000C4 EB0B 0BC1       ADD              r11, r11, r1, LSL #3
   76 000000C8         
   77 000000C8         calc_correcting_code
   78 000000C8 45DC            CMP              r12, r11
   79 000000CA BF08 F000 
              F80A             BLEQ             count_ones
   80 000000D0 BF08 F010 
              0001             ANDEQS           r0, r0, #1
   81 000000D6 D1FE            BNE              .
   82 000000D8 F04F 0101       MOV              r1, #1
   83 000000DC FA01 F100       LSL              r1, r0
   84 000000E0 EA89 0901       EOR              r9, r1
   85 000000E4         
   86 000000E4         correct_code
   87 000000E4         
   88 000000E4         
   89 000000E4         
   90 000000E4         
   91 000000E4         
   92 000000E4         



ARM Macro Assembler    Page 3 


   93 000000E4         ;parity_all_check
   94 000000E4         ;  ADR  r1, par1
   95 000000E4         ;  LDR  r1, [r1] ; load p_all mask
   96 000000E4         ;  AND  r0, r1, r9  ; extract bits
   97 000000E4         ;  BL  count_ones
   98 000000E4         ;  RRX  r2, r2, #1  ; set carry. 0 = even, 1 = odd 
   99 000000E4         
  100 000000E4         
  101 000000E4         ; Assume that r0 has the word loaded. Places count in r0
                        when done (RESETS)
  102 000000E4         ; WARNING: Code overwrites r0
  103 000000E4         ; r0 = word
  104 000000E4         ; r1 = word!
  105 000000E4         ; r2 = count
  106 000000E4         count_ones
  107 000000E4 F010 0F00       TST              r0, #&0
  108 000000E8 BF04 4610       MOVEQ            r0, r2
  109 000000EC 4770            BXEQ             lr          ; base case
  110 000000EE         
  111 000000EE F1A0 0101       SUB              r1, r0, #1
  112 000000F2 EA00 0001       AND              r0, r0, r1
  113 000000F6 F102 0201       ADD              r2, r2, #1  ; increment count 
  114 000000FA E7F3            B                count_ones
  115 000000FC         
  116 000000FC         test_count_ones
  117 000000FC F04F 0024       MOV              r0, #0x24
  118 00000100 F7FF FFF0       BL               count_ones
  119 00000104 2A02            CMP              r2, #2      ; should be equal
  120 00000106 F04F 0020       MOV              r0, #0x20
  121 0000010A F04F 0200       MOV              r2, #0
  122 0000010E F7FF FFE9       BL               count_ones
  123 00000112 2A01            CMP              r2, #1
  124 00000114 47F0            BLX              lr
  125 00000116         
  126 00000116         
  127 00000116         
  128 00000116 00 00           ALIGN
  129 00000118                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\main.d -o.\main.o -I.\RTE\_SimpleProject -IC:\Keil_v5\ARM\PACK\A
RM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Dev
ice\Include\TM4C123 --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION 
SETA 526" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --list=.
\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 1 in file main.s
   Uses
      None
Comment: .text unused
Start 0000001C

Symbol: Start
   Definitions
      At line 12 in file main.s
   Uses
      At line 2 in file main.s
Comment: Start used once
base 00000018

Symbol: base
   Definitions
      At line 10 in file main.s
   Uses
      At line 13 in file main.s
Comment: base used once
calc_correcting_code 000000C8

Symbol: calc_correcting_code
   Definitions
      At line 77 in file main.s
   Uses
      None
Comment: calc_correcting_code unused
calculate_par_0 00000058

Symbol: calculate_par_0
   Definitions
      At line 36 in file main.s
   Uses
      None
Comment: calculate_par_0 unused
calculate_par_1 0000006C

Symbol: calculate_par_1
   Definitions
      At line 44 in file main.s
   Uses
      None
Comment: calculate_par_1 unused
calculate_par_2 00000082

Symbol: calculate_par_2
   Definitions
      At line 52 in file main.s
   Uses
      None
Comment: calculate_par_2 unused
calculate_par_3 00000098

Symbol: calculate_par_3



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 60 in file main.s
   Uses
      None
Comment: calculate_par_3 unused
calculate_par_4 000000AE

Symbol: calculate_par_4
   Definitions
      At line 68 in file main.s
   Uses
      None
Comment: calculate_par_4 unused
correct_code 000000E4

Symbol: correct_code
   Definitions
      At line 86 in file main.s
   Uses
      None
Comment: correct_code unused
count_ones 000000E4

Symbol: count_ones
   Definitions
      At line 106 in file main.s
   Uses
      At line 40 in file main.s
      At line 48 in file main.s
      At line 56 in file main.s
      At line 64 in file main.s
      At line 72 in file main.s
      At line 79 in file main.s
      At line 114 in file main.s
      At line 118 in file main.s
      At line 122 in file main.s

extract_recieved_code 0000002A

Symbol: extract_recieved_code
   Definitions
      At line 20 in file main.s
   Uses
      None
Comment: extract_recieved_code unused
par0 00000000

Symbol: par0
   Definitions
      At line 4 in file main.s
   Uses
      At line 37 in file main.s
Comment: par0 used once
par1 00000004

Symbol: par1
   Definitions
      At line 5 in file main.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 45 in file main.s
Comment: par1 used once
par2 00000008

Symbol: par2
   Definitions
      At line 6 in file main.s
   Uses
      At line 53 in file main.s
Comment: par2 used once
par3 0000000C

Symbol: par3
   Definitions
      At line 7 in file main.s
   Uses
      At line 61 in file main.s
Comment: par3 used once
par4 00000010

Symbol: par4
   Definitions
      At line 8 in file main.s
   Uses
      At line 69 in file main.s
Comment: par4 used once
parA 00000014

Symbol: parA
   Definitions
      At line 9 in file main.s
   Uses
      None
Comment: parA unused
test_count_ones 000000FC

Symbol: test_count_ones
   Definitions
      At line 116 in file main.s
   Uses
      At line 16 in file main.s
Comment: test_count_ones used once
19 symbols
353 symbols in table
